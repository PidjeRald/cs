using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Serialization;
using ClassLibrary1;

namespace lab3
{
    class Rectangle : IComparable<Rectangle>
    {
        public double Length;
        public double Width;

        public Rectangle(double Length, double Width)
        {
            this.Length = Length;
            this.Width = Width;
        }

        public int CompareTo(Rectangle other)
        {
            return (this.Length * this.Width).CompareTo(other.Length * other.Width);
        }
    }
    internal class Program
    {
        static void Main(string[] args)
        {
            ArrayStack<Rectangle> stack1 = new ArrayStack<Rectangle>(5);
            stack1.Push(new Rectangle(3, 4));
            stack1.Push(new Rectangle(2, 6));
            stack1.Push(new Rectangle(5, 2));
            stack1.Push(new Rectangle(7, 5));
            stack1.Push(new Rectangle(1, 4));

            bool exists1 = StackUtils.Exists(stack1, rect => rect.CompareTo(new Rectangle(6, 2)) == 0);
            bool exists2 = StackUtils.Exists(stack1, rect => rect.CompareTo(new Rectangle(1, 2)) == 0);

            IStack<Rectangle> foundStack1 = StackUtils.FindAll(stack1, rect => rect.CompareTo(new Rectangle(1, 11)) > 0, () => new ArrayStack<Rectangle>(3));


            IStack<double> convertedStack1 = StackUtils.ConvertAll(stack1, rect => rect.Length, () => new LinkedStack<double>());

            StackUtils.ForEach(stack1, rect => Console.WriteLine("Width: {0}, Height: {1} ", rect.Length, rect.Width));

            bool checkForAll1 = StackUtils.CheckForAll(stack1, rect => rect.CompareTo(new Rectangle(10, 10)) < 0);
            bool checkForAll2 = StackUtils.CheckForAll(stack1, rect => rect.CompareTo(new Rectangle(10, 1)) > 0);







            LinkedStack<int> linkedStack = new LinkedStack<int>();
            linkedStack.Push(1);
            linkedStack.Push(2);
            linkedStack.Push(3);
            linkedStack.Push(4);
            linkedStack.Push(5);

            bool exists = StackUtils.Exists(linkedStack, value => value == 2);
            exists = StackUtils.Exists(linkedStack, value => value == -2);

            IStack<int> foundStack = StackUtils.FindAll(linkedStack, value => value % 2 == 0, () => new ArrayStack<int>(3));
            int value1 = foundStack.Peek();

            IStack<string> convertedStack = StackUtils.ConvertAll(foundStack, value => value.ToString(), () => new LinkedStack<string>());
            string value2 = convertedStack.Pop();
            string value3 = convertedStack.Pop();

            UnmutableStack<int> unmutableStack = new UnmutableStack<int>(linkedStack);

            StackUtils.ForEach(unmutableStack, value => Console.WriteLine(value));


            bool checkForAll = StackUtils.CheckForAll(unmutableStack, value => value > 0);
        }
    }
}
